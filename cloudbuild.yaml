substitutions:
  _FUNCTION_NAME: 'fnc-kaggle-sample-sales'     # Altere de acordo com a funcao a ser carregada
  _FUNCTION_BUCKET: 'tf-cloud-functions-bucket'

logsBucket: 'cloudbuild-logs-cloud-function-466417'
timeout: 3600s

steps:

  # 0. Verifica e deleta a função existente (usando Cloud Run como fallback)
  - name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "Verificando se a função $_FUNCTION_NAME existe..."
        if gcloud functions describe $_FUNCTION_NAME --region=$_REGION --gen2 >/dev/null 2>&1; then
          echo "Função encontrada via Cloud Functions. Deletando..."
          gcloud functions delete $_FUNCTION_NAME --region=$_REGION --gen2 --quiet
        elif gcloud run services describe $_FUNCTION_NAME --region=$_REGION >/dev/null 2>&1; then
          echo "Função encontrada via Cloud Run. Deletando pelo Cloud Functions..."
          gcloud functions delete $_FUNCTION_NAME --region=$_REGION --gen2 --quiet
        else
          echo "Função não encontrada. Pulando deleção."
        fi

  # 1. Zipa a pasta da funcao com suas dependencias
  - name: 'python:3.10'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        apt-get update && apt-get install -y zip
        cd functions/$_FUNCTION_NAME
        zip -r ../../$_FUNCTION_NAME.zip .

  # 2. Copia o zip para o bucket
  - name: 'gcr.io/cloud-builders/gsutil'
    args: ['cp', '$_FUNCTION_NAME.zip', 'gs://$_FUNCTION_BUCKET/$_FUNCTION_NAME.zip']

  # 3. Terraform Init
  - name: 'hashicorp/terraform:latest'
    entrypoint: 'terraform'
    args: ['init']
    dir: 'terraform'

  # 4. Terraform Plan
  - name: 'hashicorp/terraform:latest'
    entrypoint: 'terraform'
    args: ['plan', '-out=tfplan']
    dir: 'terraform'

  # 5. Terraform Apply
  - name: 'hashicorp/terraform:latest'
    entrypoint: 'terraform'
    args: ['apply', '-auto-approve', 'tfplan']
    dir: 'terraform'
